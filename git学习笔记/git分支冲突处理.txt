1.创建一个分支 new1

　　　　E:\mygit\web_html [master ↑]>  git branch new1
　　　　E:\mygit\web_html [master ↑]>

2.在主分支上开发 drag.js  在obj.onmousedown 函数中 添加

		document.onmouseomove = function(ev){
			var ev = ev || event;

			obj.style.left = ev.clientX - disX +'px';
			obj.style.top = ev.clientY - disY +'px';
		}

3.提交版本库当中  git commit -a -m "提交的记录"

　　　　E:\mygit\web_html [master ↑]>  git commit -a -m "change drag.js form master"  提交到版本库
　　　　[master d129bbe] change drag.js form master
　　　　1 file changed, 7 insertions(+), 1 deletion(-)
　　　　E:\mygit\web_html [master ↑]>

4.切换拿到new1分支 git checkout 切换的分支名

　　　　E:\mygit\web_html [master ↑]>  git checkout new1
　　　　Switched to branch 'new1'
　　　　E:\mygit\web_html [new1]>

5.在new1分支在开发 开发 drag.js  在obj.onmousedown 函数中 添加

		document.onmouseomove = function(ev){
			var ev = ev || event;

			obj.style.left = ev.pageX - disX +'px';
			obj.style.top = ev.pageY - disY +'px';
		}

	修改不同的地方合并后是不会冲突的，如果改的是相同的地方，就会有冲突

6.提交到版本库

　　　　E:\mygit\web_html [new1]> git commit -a -m "change drag.js from new1"
　　　　[new1 aca2df9] change drag.js from new1
　　　　1 file changed, 6 insertions(+), 1 deletion(-)
　　　　E:\mygit\web_html [new1]>

7.这两个分支改写的有相同的部分，就不能用快速合并的方式（git merge 快速分支合并）来处理了 

	这时候要想合并，需要先把主分支master和new1的版本合并成一个版本

	还需要找到他们共享的版本，加上这两个版本，总共三个版本，找到之后，git会自动进行智能合并，

	如果开发的是同一个文件，同一段代码，就会产生冲突


8.解决冲突

（1）先切换回主分支

　　　　E:\mygit\web_html [new1]> git checkout master
　　　　Switched to branch 'master'
　　　　Your branch is ahead of 'origin/master' by 2 commits.
　　　　(use "git push" to publish your local commits)
　　　　E:\mygit\web_html [master ↑]>

（2）尝试合并分支

　　　　E:\mygit\web_html [master ↑]>  git merge new1
　　　　Auto-merging drag.js
　　　　CONFLICT (content): Merge conflict in drag.js  产生冲突
　　　　Automatic merge failed; fix conflicts and then commit the result. 自动合并失败  修复冲突，然后提交结果
　　　　E:\mygit\web_html [master ↑ +0 ~0 -0 !1 | +0 ~0 -0 !1 !]>

（3）[master ↑ +0 ~0 -0 !1 | +0 ~0 -0 !1 !]>  说明

	+ 表示有添加  ~表示有修改  -表示有删除  ！表示有冲突

（4）查看状态 git status 

　　　　E:\mygit\web_html [master ↑ +0 ~0 -0 !1 | +0 ~0 -0 !1 !]>  git status
　　　　On branch master
　　　　Your branch is ahead of 'origin/master' by 2 commits.
　　　　(use "git push" to publish your local commits)
　　　　You have unmerged paths.
　　　　(fix conflicts and run "git commit")

　　　　Unmerged paths:
　　　　(use "git add <file>..." to mark resolution)

　　　　both modified:   drag.js 冲突的文件

　　　　no changes added to commit (use "git add" and/or "git commit -a")
　　　　E:\mygit\web_html [master ↑ +0 ~0 -0 !1 | +0 ~0 -0 !1 !]>

（5）此时冲突的文件中显示

function drag(id){
	var obj = document.getElementById(id);
	var disX = 0;
	var disY = 0;
	obj.onmousedown = function(ev){
		var ev = ev || event;
		disX = ev.clientX - this.offsetLeft;
		disY = ev.clientY - this.offsetTop;
<<<<<<< HEAD
		
		document.onmouseomove = function(ev){
			var ev = ev || event;

			obj.style.left = ev.clientX - disX +'px';
			obj.style.top = ev.clientY - disY +'px';
=======
		document.onmouseomove = function(ev){
			var ev = ev || event;

			obj.style.left = ev.pageX - disX +'px';
			obj.style.top = ev.pageY - disY +'px';
>>>>>>> new1
		}
	}
}


（6）人为解决冲突  留下正确的，删除不正确的


function drag(id){
	var obj = document.getElementById(id);
	var disX = 0;
	var disY = 0;
	obj.onmousedown = function(ev){
		var ev = ev || event;
		disX = ev.clientX - this.offsetLeft;
		disY = ev.clientY - this.offsetTop;
		
		document.onmouseomove = function(ev){
			var ev = ev || event;

			obj.style.left = ev.clientX - disX +'px';
			obj.style.top = ev.clientY - disY +'px';
		}
	}
}


（7）提交到版本库

　　　　E:\mygit\web_html [master ↑ +0 ~0 -0 !1 | +0 ~0 -0 !1 !]>  git commit -a -m "change drag.js"
　　　　[master e85c558] change drag.js
　　　　E:\mygit\web_html [master ↑]>

此时就解决了冲突问题

（8）查看分支都有哪些 git branch  在查看new1分支是否合并到master  git branch --merged


　　　　E:\mygit\web_html [master ↑]>  git branch  查看分支
　　　　* master
　　　　new1
　　　　E:\mygit\web_html [master ↑]>  git branch --merged  查看分支new1是否合并到主分支master上
　　　　* master
　　　　new1
　　　　E:\mygit\web_html [master ↑]>

（9）对于不长期维护和使用的新开（new1）的分支，在合并完之后可以删除 git branch -d 删除的分支名
---------------------------------------------------------------------------------------------------

总结：

1.当我们开了很多分支之后，合并的方法都是一样的，通过git merge 合并的分支名  便会把其他分支合并到主分支上

2.如果分子合并失败，就先查看下冲突的文件，打开文件就行手动修改冲突的文件

3.然后在提交到版本库就可以了

4.查看分支是否合并到主分支master上  查看分支都有哪些 git branch  在查看new1分支是否合并到master  git branch --merged

5.如果这个新开（new1）分支不做长期维护和做特别适用，就可以在合并完之后删除了


--------------------------------------------------------------------------------------------------




